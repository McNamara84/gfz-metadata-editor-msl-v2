openapi: 3.1.1
info:
  title: ELMO - EPOS Laboratory Metadata Optimizer
  description: |-
    This is the ELMO API V2 from GFZ Data Services. The API allows management and retrieval of metadata for scientific datasets.

    Some useful links:
    - [The ELMO repository](https://github.com/McNamara84/gfz-metadata-editor-msl-v2)
    - [Test Server](https://mde2.cats4future.de)

    ### Binary Data
    Some endpoints return binary data (XML files) for download. These responses use the `application/octet-stream` content type.

    ### Security Note
    This API is publicly accessible and does not require authentication. However, rate limiting may apply.
  termsOfService: https://github.com/McNamara84/gfz-metadata-editor-msl-v2
  contact:
    name: Holger Ehrmann
    email: ehrmann@gfz-potsdam.de
    url: https://mde2.cats4future.de
  license:
    name: GPL-2.0-only
    url: https://raw.githubusercontent.com/McNamara84/gfz-metadata-editor-msl-v2/refs/heads/main/LICENSE.md
  version: 1.9.0
externalDocs:
  description: Documentation of the API V1 at GitHub
  url: https://github.com/McNamara84/gfz-metadata-editor-msl-v2#api-endpunkte
servers:
  - url: https://mde2.cats4future.de/api/v2
    description: Test server
security: []
tags:
  - name: general
    description: General operations for health checks and version
  - name: update
    description: Operations for updating the vocabularies
  - name: vocabularies
    description: Operations for retrieving vocabularies
  - name: validation
    description: Operations for data validation
  - name: dataset
    description: Operations for dataset management and export
paths:
  /update/timezones:
    get:
      tags:
        - update
      summary: Update timezones
      description: Fetches the latest timezones from TimeZoneDB API and updates the local JSON file.
      operationId: updateTimezones
      responses:
        "200":
          description: Timezones successfully updated
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/TimezonesUpdateResponse"
        "500":
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
  /update/vocabs/msl:
    get:
      tags:
        - update
      summary: Update MSL vocabularies
      description: |-
        Updates all MSL vocabularies (materials, porefluids, and rockphysics) from the source repository. 
        Synonyms from the source are stored as comma-separated strings in the description field.
      operationId: getMslVocab
      responses:
        "200":
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/VocabularyUpdate"
        "500":
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
  /update/vocabs/msl/labs:
    get:
      tags:
        - update
      summary: Update MSL Labs vocabulary
      description: Fetch and update the MSL Labs vocabulary from the GitHub repository.
      operationId: updateMslLabs
      responses:
        "200":
          description: MSL Labs vocabulary successfully updated
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/MSLLabsUpdateResponse"
        "500":
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
  /update/vocabs/gcmd:
    get:
      tags:
        - update
      summary: Update GCMD vocabularies (Science Keywords, Instruments, and Platforms)
      description: Updates all GCMD vocabularies (Science Keywords, Instruments, and Platforms) from NASA's GCMD repository
      operationId: updateGcmdVocabs
      responses:
        "200":
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/GcmdVocabularyUpdate"
        "500":
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
  /general/alive:
    get:
      tags:
        - general
      summary: Health check
      description: Check if the API is responsive
      operationId: getAlive
      responses:
        "200":
          description: API is responsive
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/HealthResponse"
        "500":
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
  /vocabs/sciencekeywords:
    get:
      tags:
        - vocabularies
      summary: Get GCMD Science Keywords (for third party use)
      description: Retrieve the controlled vocabulary of GCMD Science Keywords from NASA (already prepared for use with jsTree)
      operationId: getGcmdScienceKeywords
      responses:
        "200":
          description: Successful response
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/VocabularyTree"
        "500":
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
  /vocabs/freekeywords/all:
    get:
      tags:
        - vocabularies
      summary: Get all free keywords
      description: Returns all free keywords from the database, regardless of curation status
      operationId: getAllFreeKeywords
      responses:
        "200":
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/FreeKeywordsResponse"
        "404":
          description: No keywords found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        "500":
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"

  /vocabs/freekeywords/curated:
    get:
      tags:
        - vocabularies
      summary: Get curated free keywords
      description: Returns only curated free keywords from the database
      operationId: getCuratedFreeKeywords
      responses:
        "200":
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/FreeKeywordsResponse"
        "404":
          description: No curated keywords found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        "500":
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"

  /vocabs/freekeywords/uncurated:
    get:
      tags:
        - vocabularies
      summary: Get uncurated free keywords
      description: Returns only uncurated free keywords from the database
      operationId: getUncuratedFreeKeywords
      responses:
        "200":
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/FreeKeywordsResponse"
        "404":
          description: No uncurated keywords found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        "500":
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
  /vocabs/roles:
    get:
      tags:
        - vocabularies
      summary: Retrieve roles based on type
      description: Get a list of roles filtered by type
      operationId: getRoles
      parameters:
        - name: type
          in: query
          description: Type of roles to retrieve
          schema:
            type: string
            enum: [all, person, institution, both]
            default: all
      responses:
        "200":
          description: Successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Role"
        "400":
          description: Invalid role type provided
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        "500":
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
  /vocabs/relations:
    get:
      tags:
        - vocabularies
      summary: Get all relations
      description: Retrieve all available relations for dataset relationships
      operationId: getRelations
      responses:
        "200":
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/RelationsResponse"
        "404":
          description: No relations found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        "500":
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
  /vocabs/licenses/all:
    get:
      tags:
        - vocabularies
      summary: Get all licenses
      description: Returns all available licenses
      operationId: getAllLicenses
      responses:
        "200":
          description: Successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/License"
        "404":
          description: No licenses found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        "500":
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
  /vocabs/licenses/software:
    get:
      tags:
        - vocabularies
      summary: Get software licenses
      description: Returns licenses specifically for software
      operationId: getSoftwareLicenses
      responses:
        "200":
          description: Successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/SoftwareLicense"
        "404":
          description: No software licenses found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        "500":
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
  /validation/patterns/{type}:
    get:
      tags:
        - validation
      summary: Retrieve regex pattern for validation
      description: Returns the regex pattern for validating the specified type
      operationId: getPattern
      parameters:
        - name: type
          in: path
          required: true
          schema:
            type: string
          description: The type for which to retrieve the validation pattern
      responses:
        "200":
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/PatternResponse"
        "404":
          description: Pattern not found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        "500":
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
  /validation/identifiertypes:
    get:
      tags:
        - validation
      summary: Retrieve all identifier types
      description: Returns all available identifier types with their validation patterns
      operationId: getIdentifierTypes
      responses:
        "200":
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/IdentifierTypesResponse"
        "404":
          description: No identifier types found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        "500":
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
  /dataset/export/{id}/{scheme}:
    get:
      tags:
        - dataset
      summary: View dataset as XML
      description: View a dataset as XML in the specified metadata scheme
      operationId: exportDataset
      parameters:
        - name: id
          in: path
          description: Dataset ID to export
          required: true
          schema:
            type: integer
            format: int64
        - name: scheme
          in: path
          description: Metadata scheme for export
          required: true
          schema:
            type: string
            enum: [datacite, iso, dif]
      responses:
        "200":
          description: Successful operation
          content:
            application/xml:
              schema:
                type: string
                format: binary
                description: XML content of the dataset
        "400":
          description: Invalid ID or scheme provided
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        "404":
          description: Dataset not found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
  /dataset/export/{id}/{scheme}/download:
    get:
      tags:
        - dataset
      summary: Download dataset as XML
      description: Download a dataset as XML file in the specified metadata scheme
      operationId: exportDatasetDownload
      parameters:
        - name: id
          in: path
          description: Dataset ID to export
          required: true
          schema:
            type: integer
            format: int64
        - name: scheme
          in: path
          description: Metadata scheme for export
          required: true
          schema:
            type: string
            enum: [datacite, iso, dif]
      responses:
        "200":
          description: Successful operation
          content:
            application/octet-stream:
              schema:
                type: string
                format: binary
                description: XML file for download
        "400":
          description: Invalid ID or scheme provided
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        "404":
          description: Dataset not found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
  /dataset/export/{id}/all:
    get:
      tags:
        - dataset
      summary: View all metadata formats
      description: View dataset in all available metadata schemes combined in one XML document
      operationId: exportAllFormats
      parameters:
        - name: id
          in: path
          description: Dataset ID to export
          required: true
          schema:
            type: integer
            format: int64
      responses:
        "200":
          description: Successful operation
          content:
            application/xml:
              schema:
                type: string
                format: binary
                description: Combined XML content
        "400":
          description: Invalid ID provided
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        "404":
          description: Dataset not found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
  /dataset/export/{id}/all/download:
    get:
      tags:
        - dataset
      summary: Download all metadata formats
      description: Download dataset in all available metadata schemes as a single XML file
      operationId: exportAllFormatsDownload
      parameters:
        - name: id
          in: path
          description: Dataset ID to export
          required: true
          schema:
            type: integer
            format: int64
      responses:
        "200":
          description: Successful operation
          content:
            application/octet-stream:
              schema:
                type: string
                format: binary
                description: Combined XML file for download
        "400":
          description: Invalid ID provided
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        "404":
          description: Dataset not found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
components:
  schemas:
    License:
      type: object
      properties:
        rights_id:
          type: integer
          format: int64
          description: Unique identifier for the license
          example: 1
        name:
          type: string
          description: Full name of the license
          example: "Creative Commons Attribution 4.0 International"
        url:
          type: string
          format: uri
          description: URL to the license text
          example: "https://creativecommons.org/licenses/by/4.0/"
        forSoftware:
          type: integer
          enum: [0, 1]
          default: 0
          description: Indicates if license is suitable for software (1) or not (0)
      required:
        - rights_id
        - name
        - url
    SoftwareLicense:
      type: object
      properties:
        rights_id:
          type: integer
          format: int64
          description: Unique identifier for the software license
          example: 2
        name:
          type: string
          description: Full name of the software license
          example: "MIT License"
        url:
          type: string
          format: uri
          description: URL to the license text
          example: "https://opensource.org/licenses/MIT"
        forSoftware:
          type: integer
          enum: [1]
          default: 1
          description: Always 1 for software licenses
      required:
        - rights_id
        - name
        - url
        - forSoftware
    TimezonesUpdateResponse:
      type: object
      properties:
        message:
          type: string
          description: Status message of the update operation
          example: "Timezones successfully updated"
        timezones:
          type: array
          description: List of updated timezones
          items:
            $ref: "#/components/schemas/Timezone"
      required:
        - message
        - timezones
    Timezone:
      type: object
      properties:
        value:
          type: string
          description: The timezone identifier
          example: "Europe/Berlin"
        label:
          type: string
          description: The formatted timezone label
          example: "UTC+02:00 (Europe/Berlin)"
      required:
        - value
        - label
    VocabularyUpdate:
      type: object
      properties:
        message:
          type: string
          description: Status message of the update operation
          example: "Successfully updated MSL vocabularies"
        version:
          type: string
          description: Version of the updated vocabulary
          example: "1.3"
        timestamp:
          type: string
          format: date-time
          description: Time of the update
          example: "2024-11-16T20:30:22Z"
      required:
        - message
        - version
        - timestamp
    RelationsResponse:
      type: object
      properties:
        relations:
          type: array
          description: List of available relations
          items:
            $ref: "#/components/schemas/Relation"
      required:
        - relations
    Relation:
      type: object
      properties:
        id:
          type: integer
          description: Unique identifier of the relation
          example: 1
        name:
          type: string
          maxLength: 45
          description: Name of the relation
          example: "IsCitedBy"
        description:
          type: string
          maxLength: 1000
          description: Description of the relation
          example: "Indicates that B cites A"
      required:
        - id
        - name
        - description
    MSLLabsUpdateResponse:
      type: object
      properties:
        message:
          type: string
          description: Status message of the update operation
          example: "MSL Labs vocabulary successfully updated"
        labs:
          type: array
          description: List of updated labs
          items:
            $ref: "#/components/schemas/MSLLab"
      required:
        - message
        - labs
    MSLLab:
      type: object
      properties:
        id:
          type: string
          description: Unique identifier for the lab
          example: "lab1"
        name:
          type: string
          description: Name of the laboratory
          example: "Laboratory A"
        affiliation:
          type: string
          description: Affiliation of the laboratory
          example: "University X"
      required:
        - id
        - name
        - affiliation
    Error:
      type: object
      properties:
        error:
          type: string
          description: Error message
          example: "An error occurred"
      required:
        - error
    GcmdVocabularyUpdate:
      type: object
      properties:
        message:
          type: string
          description: Status message of the update operation
          example: "GCMD vocabularies update completed"
        results:
          type: object
          description: Results for each vocabulary type
          properties:
            instruments:
              type: string
              example: "Updated successfully"
            sciencekeywords:
              type: string
              example: "Updated successfully"
            platforms:
              type: string
              example: "Updated successfully"
        timestamp:
          type: string
          format: date-time
          description: Time of the update
          example: "2024-11-17T10:51:38Z"
      required:
        - message
        - results
        - timestamp
    HealthResponse:
      type: object
      properties:
        message:
          type: string
          description: Health status message
          example: "I'm still alive..."
      required:
        - message
    VocabularyTree:
      type: array
      description: Hierarchical structure of vocabulary terms
      items:
        $ref: "#/components/schemas/VocabularyNode"
    VocabularyNode:
      type: object
      properties:
        id:
          type: string
          description: Unique identifier for the term
        text:
          type: string
          description: Display text of the term
        language:
          type: string
          description: Language code of the term
        scheme:
          type: string
          description: Name of the vocabulary scheme
        schemeURI:
          type: string
          format: uri
          description: URI of the vocabulary scheme
        description:
          type: string
          description: Description or synonyms (comma-separated)
        children:
          type: array
          description: Child terms in the hierarchy
          items:
            $ref: "#/components/schemas/VocabularyNode"
      required:
        - id
        - text
        - language
        - scheme
        - schemeURI
        - description
        - children
    Role:
      type: object
      properties:
        id:
          type: integer
          description: Unique identifier of the role
          example: 1
        name:
          type: string
          description: Name of the role
          example: "Data Curator"
        forInstitutions:
          type: integer
          description: |
            Role type indicator:
            * `0` - for persons only
            * `1` - for institutions only
            * `2` - for both persons and institutions
          enum: [0, 1, 2]
          example: 0
      required:
        - id
        - name
        - forInstitutions
    FreeKeywordsResponse:
      type: array
      description: List of free keywords
      items:
        type: object
        properties:
          free_keyword:
            type: string
            description: The keyword text
            example: "carbon dioxide emission"
        required:
          - free_keyword
    PatternResponse:
      type: object
      properties:
        pattern:
          type: string
          description: Regular expression pattern for validation
          example: "^[a-zA-Z0-9]{10}$"
      required:
        - pattern
    IdentifierTypesResponse:
      type: object
      properties:
        identifierTypes:
          type: array
          description: List of identifier types
          items:
            $ref: "#/components/schemas/IdentifierType"
      required:
        - identifierTypes
    IdentifierType:
      type: object
      properties:
        name:
          type: string
          description: Name of the identifier type
          example: "DOI"
        pattern:
          type: string
          description: Regular expression pattern for validation
          example: "^10\\.\\d{4,9}/[-._;()/:A-Z0-9]+$"
        description:
          type: string
          description: Description of the identifier type
          example: "Digital Object Identifier"
      required:
        - name
        - pattern
        - description
